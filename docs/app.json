[{"name": "app.py", "content": "from shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nimport pandas as pd\nimport numpy as np\nimport random\nfrom plotnine import ggplot, aes, geom_col, geom_line, geom_smooth, labs, geom_vline, geom_hline, scale_fill_discrete, annotate, coord_cartesian, theme_538, scale_fill_manual, geom_rect, theme, element_blank, scale_fill_grey\n\n#%% parameters\ndemand_default = 60\nn_renewables = 8\nn_nuclear = 10\nn_lignite = 22\nn_hardcoal = 20\nn_gas = 5\nn_oil = 10\np_renewables = 5\np_nuclear = 10\np_lignite = 30\np_hardcoal = 32\np_gas = 70\np_oil = 120\np_renewables_eeg = 130\n\ndef createDf(n, p_low, p_high, name):\n    df = pd.DataFrame({'source': [name] * n, 'price': np.random.randint(low=p_low, high=p_high, size=n), 'capacity': [1] * n})\n    df.sort_values('price', inplace=True)\n    return df\n#%%\n# df_renewables = createDf(n_renewables, p_low=p_renewables - 2, p_high=p_renewables + 2, name='Renewable')\n\n#%%\ndf_nuclear = createDf(n_nuclear, p_low=p_nuclear - 0.1, p_high=p_nuclear + 0.1, name='Nuclear')\ndf_lignite = createDf(n_lignite, p_low=p_lignite - 10, p_high=p_lignite + 10, name='Lignite')\ndf_hardcoal = createDf(n_hardcoal, p_low=p_hardcoal - 10, p_high=p_hardcoal + 10, name='HardCoal')\ndf_gas = createDf(n_gas, p_low=p_gas - 20, p_high=p_gas + 20, name='Gas')\ndf_oil = createDf(n_oil, p_low=p_oil - 20, p_high=p_oil + 20, name='Oil')\ndf = pd.concat([df_nuclear, df_lignite, df_hardcoal, df_gas, df_oil])\ndf.sort_values('price', inplace=True)\ndf.reset_index(inplace=True)\ndf['number'] = df.index\ndf.drop(columns=['index'], axis=1, inplace=True)\n        \n#%%\napp_ui = ui.page_fluid(\n    ui.panel_title('Merit Order'),\n    ui.p('How Prices are determined on Energy Markets'),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"n_demand\", \"Demand\", 60, 65, demand_default),\n            ui.input_slider(\"n_renewables\", \"Add Renewables\", 0, 25, 0),\n        ui.input_slider(\"p_gas\", \"Gas Price\", p_gas, 200, p_gas, step=10),\n        ui.h4('Economic Impact'),\n            ui.input_radio_buttons(\n        \"show_impact_renewables\", \"Show Economic Impact of Renewables?\", {\"yes\": \"Yes\", \"no\": \"No\"}, selected='no'\n    ),\n            ui.input_radio_buttons(\n        \"is_gas_replaceable\", \"Is Gas replaceable?\", {\"yes\": \"Yes (well, in theory)\", \"no\": \"No (let's be realistic)\"}\n    ),\n         ui.input_radio_buttons(\n        \"show_impact_high_gas_prices\", \"Show Economic Impact of High Gas Prices?\", {\"yes\": \"Yes\", \"no\": \"No\"}, selected='no'\n    ),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"plt_merit_order\") \n        )\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    \n    def df_filt():\n        p_gas_new = input.p_gas()\n        n_add = input.n_renewables()\n        df_filt = df.copy()\n        if p_gas_new != p_gas:\n            df_filt.loc[df_filt['source']=='Gas', 'price'] = np.random.randint(low=-5, high=5, size=n_gas) + p_gas_new\n            df_filt.sort_values('price', inplace=True)\n            df_filt.reset_index(inplace=True)\n            df_filt['number'] = df_filt.index\n            df_filt.drop(columns=['index'], axis=1, inplace=True)\n            \n        if n_add > 0:\n            df_renewables_add = createDf(n=n_add, p_low=p_renewables-2, p_high=p_renewables+2, name='Renewable')\n            df_filt = pd.concat([df_filt, df_renewables_add])\n            df_filt.sort_values('price', inplace=True)\n            df_filt.reset_index(inplace=True)\n            df_filt['number'] = df_filt.index\n            \n        if input.is_gas_replaceable() == 'no':\n            nrows_df = len(df)\n            nrows_filt = len(df_filt)\n            df_gas = df_filt[df_filt['source']=='Gas'].copy()\n            df_without_gas = df_filt[df_filt['source'] != 'Gas'].copy()\n            nrows_gas = len(df_gas)\n            nrows_wo_gas = len(df_without_gas.head(input.n_demand() - nrows_gas))\n            # %% replace numbering based on Gas being not replaceable\n            # 1.build df with max n_demand rows\n            df_filt = pd.concat([df_without_gas.head(input.n_demand() - nrows_gas), df_gas])\n            print(f\"df: {nrows_df}, filt: {nrows_filt}, wo_gas: {nrows_wo_gas}\")\n            df_filt = pd.concat([df_filt, df_without_gas.tail(nrows_filt - nrows_wo_gas)])\n            \n            df_filt.reset_index(inplace=True)\n            df_filt['number'] = df_filt.index\n\n        \n            \n        return df_filt\n        \n    def market_price_default():\n        return df.loc[df['number'] == input.n_demand(), 'price'].values[0]\n\n    \n    @output\n    @render.plot\n    def plt_merit_order():\n        demand = input.n_demand()\n\n        market_price = df_filt().loc[df_filt()['number'] == demand, 'price'].values[0]\n        g = (ggplot(data= df_filt()) + \n            aes(x='number', y='price') + \n            geom_col(mapping=aes(fill='source')) + \n            # geom_smooth(span=0.4) + \n            labs(x = 'Supply Capacity [GW]', y='Marginal Costs [EUR/MWh]', title='Merit Order Energy Pricing') + \n            geom_vline(xintercept=demand, linetype='dotted', size = 1) +\n            geom_hline(yintercept=market_price_default(), linetype='dotted', size = 1) + \n            scale_fill_discrete(name='Energy Source') +\n            annotate('text', x=15, y=market_price_default() + 5, label = 'P Market (Default)') +\n            annotate('text', x=demand_default-10, y=158, label = 'Demand') +\n            coord_cartesian(ylim=[0, 200], xlim=[0, 110]) +\n            scale_fill_manual({'Gas': 'blue', 'HardCoal': 'black', 'Lignite': 'brown', 'Nuclear': 'orange', 'Oil': 'red'}) +\n            theme_538()\n            # theme(axis_text_y=element_blank())\n            )\n        if input.n_renewables() > 0:\n            g = (g +\n            annotate('text', x=15, y=market_price + 5, label = 'P Market new', color='green') +\n            geom_hline(yintercept=market_price, linetype='dotted', size = 1, color='grey')  +\n            scale_fill_manual({'Gas': 'blue', 'HardCoal': 'black', 'Lignite': 'brown', 'Nuclear': 'orange', 'Oil': 'red', 'Renewable': 'green'})\n            )\n            if input.show_impact_renewables() == 'yes':\n                g = (g + geom_rect(mapping=aes(xmin=0, xmax=input.n_renewables(), ymin=market_price_default(), ymax=p_renewables_eeg), fill='red', alpha=0.01) + \n                geom_hline(yintercept=p_renewables_eeg, linetype='dotted', size = 1, color='orange')  +\n                annotate('text', x=15, y=p_renewables_eeg + 5, label = 'P EEG', color='orange') +\n                geom_rect(mapping=aes(xmin=demand_default, xmax=demand_default+input.n_renewables(), ymin=market_price, ymax=market_price_default()), fill='green', alpha=0.01) + \n                scale_fill_grey()\n                )\n        if input.show_impact_high_gas_prices() == 'yes':\n            x_range =df_filt().loc[df_filt()['source']=='Gas', 'number']\n            xmin, xmax = x_range.min(), x_range.max()+1\n            df_filt().to_csv('df.csv')\n            p_market_new = df_filt().loc[df_filt()['source'] == 'Gas', 'price'].values.max()\n            g = (g + geom_rect(mapping=aes(xmin=xmin, xmax=xmax, ymin=market_price_default(), ymax=p_market_new), fill='orange', alpha=0.01) + \n            geom_hline(yintercept=p_market_new, linetype='dotted', size = 1, color='orange')  +\n            annotate('text', x=15, y=p_market_new + 5, label = 'P Market New', color='orange') +\n            geom_rect(mapping=aes(xmin=0, xmax=demand_default-n_gas, ymin=market_price_default(), ymax=p_market_new), fill='red', alpha=0.01) + \n            scale_fill_grey()\n            )\n        return g \n\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "data_prep.py", "content": "#%% packages\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import ggplot, aes, geom_col, geom_line, geom_smooth, labs, geom_vline, geom_hline, scale_fill_discrete, annotate, coord_cartesian, scale_color_manual, geom_point\n\n# %%\nn_renewables = 10\nn_nuclear = 10\nn_lignite = 20\nn_hardcoal = 20\nn_gas = 20\nn_oil = 10\np_renewables = 5\np_nuclear = 10\np_lignite = 40\np_hardcoal = 60\np_gas = 100\np_oil = 140\n\ndef createDf(n, p_low, p_high, name):\n    df = pd.DataFrame({'source': [name] * n_renewables, 'price': np.random.randint(low=p_low, high=p_high, size=n_renewables), 'capacity': [1] * n_renewables})\n    df.sort_values('price', inplace=True)\n    return df\n#%%\ndf_renewables = createDf(n_renewables, p_low=p_renewables - 2, p_high=p_renewables + 2, name='Renewable')\ndf_nuclear = createDf(n_nuclear, p_low=p_nuclear - 0.1, p_high=p_nuclear + 0.1, name='Nuclear')\ndf_lignite = createDf(n_lignite, p_low=p_lignite - 10, p_high=p_lignite + 10, name='Lignite')\ndf_hardcoal = createDf(n_hardcoal, p_low=p_hardcoal - 10, p_high=p_hardcoal + 10, name='HardCoal')\ndf_gas = createDf(n_gas, p_low=p_gas - 20, p_high=p_gas + 20, name='Gas')\ndf_oil = createDf(n_oil, p_low=p_oil - 20, p_high=p_oil + 20, name='Oil')\ndf = pd.concat([df_renewables, df_nuclear, df_lignite, df_hardcoal, df_gas, df_oil])\ndf.sort_values('price', inplace=True)\ndf.reset_index(inplace=True)\ndf['number'] = df.index\n\n#%%\ndemand = 55\nmarket_price = df.loc[df['number'] == demand, 'price'].values[0]\n\n#%%\n(ggplot(data= df) +  \n aes(x='number', y='price') + \n geom_col(mapping=aes(fill='source')) + \n geom_smooth(span=0.4) + \n labs(x = 'Supply Capacity [GW]', y='Marginal Costs [EUR/MWh]') + \n geom_vline(xintercept=demand, linetype='dotted', size = 2) +\n geom_hline(yintercept=market_price, linetype='dotted', size = 2) + \n scale_fill_discrete(name='Energy Source') +\n annotate('text', x=0, y=market_price + 5, label = 'P') +\n coord_cartesian(ylim=[0, 200], xlim=[0, 70])\n )\n\n#%%\n\n# %%\nm = pd.DataFrame({'x':range(15), 'y':range(15), 'c': ['A']*5+['B']*5+['C']*5})\nprint(m)\n\n# Plot x and y with colors mapped from \n#%% a dict\nggplot(m, aes('x','y', color='c')) + geom_point(size=3) + scale_color_manual({'A':'red', 'B':'violet', 'C': 'blue'})\n# %%\ndf = pd.read_csv('df.csv', index_col=None)\nn_demand = 65\ndf.drop(columns=['Unnamed: 0', 'index'], inplace=True)\ndf\n# %%\ndf_gas = df[df['source']=='Gas'].copy()\ndf_without_gas = df[df['source'] != 'Gas'].copy()\nnrows_wo_gas = len(df_without_gas)\nnrows_gas = len(df_gas)\n# %% replace numbering based on Gas being not replaceable\n# 1.build df with max n_demand rows\ndf_new = pd.concat([df_gas, df_without_gas.head(n_demand - nrows_gas), df_without_gas.tail(nrows_gas)])\ndf_new.reset_index(inplace=True)\ndf_new['number'] = df_new.index\ndf_new  \n# %%\n", "type": "text"}]